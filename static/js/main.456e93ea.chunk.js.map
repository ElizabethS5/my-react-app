{"version":3,"sources":["components/welcome/Welcome.js","components/clock/Clock.js","components/contact/Contact.js","components/navigation/Navigation.js","components/page404/Page404.js","jeopardyService.js","components/display/Display.js","components/jeopardy/Jeopardy.js","App.js","serviceWorker.js","index.js"],"names":["Welcome","props","className","name","Clock","tick","setState","date","Date","state","this","timer","setInterval","clearInterval","toLocaleTimeString","Component","Contact","handleChange","event","formData","target","value","handleSubmit","preventDefault","submitted","resetForm","firstName","lastName","onClick","onSubmit","htmlFor","type","onChange","Navigation","to","Page404","JeopardyService","url","client","axios","create","get","Display","data","selected","handleSelect","category","title","question","guess","Jeopardy","i","guesses","splice","currentState","score","answer","getNewQuestions","getQuestion","then","result","forEach","obj","length","map","key","e","React","App","exact","path","render","match","params","component","Boolean","window","location","hostname","ReactDOM","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.456e93ea.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Welcome(props) {\n  return <div className=\"Welcome\">Welcome, {props.name}!</div>;\n}\n\nexport default Welcome;\n","import React, { Component } from \"react\";\n\nclass Clock extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { date: new Date() };\n  }\n\n  componentDidMount() {\n    this.timer = setInterval(() => this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  tick = () => {\n    this.setState({ date: new Date() });\n  };\n\n  render() {\n    return (\n      <div className=\"clock\">\n        <h2>It is {this.state.date.toLocaleTimeString()}</h2>\n      </div>\n    );\n  }\n}\n\nexport default Clock;\n","import React, { Component } from \"react\";\n\nclass Contact extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      submitted: false,\n      formData: {\n        firstName: \"\",\n        lastName: \"\"\n      }\n    };\n  }\n\n  handleChange = event => {\n    const formData = { ...this.state.formData };\n    formData[event.target.name] = event.target.value;\n\n    this.setState({ formData });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    this.setState({ submitted: true });\n  };\n\n  resetForm = event => {\n    this.setState({\n      submitted: false,\n      formData: {\n        firstName: \"\",\n        lastName: \"\"\n      }\n    });\n  };\n\n  render() {\n    if (this.state.submitted) {\n      return (\n        <div className=\"Contact\">\n          <p>\n            Thank you, {this.state.formData.firstName}, for submitting the form\n          </p>\n          <button onClick={this.resetForm}>RESET FORM</button>\n        </div>\n      );\n    }\n    return (\n      <div className=\"Contact\">\n        <form onSubmit={this.handleSubmit}>\n          <div>\n            <label htmlFor=\"firstName\">First Name</label>\n            <input\n              type=\"text\"\n              name=\"firstName\"\n              value={this.state.formData.firstName}\n              onChange={this.handleChange}\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"lastName\">Last Name</label>\n            <input\n              type=\"text\"\n              name=\"lastName\"\n              value={this.state.formData.lastName}\n              onChange={this.handleChange}\n            />\n          </div>\n          <button type=\"submit\">Submit Form</button>\n        </form>\n        <div>\n          {this.state.formData.firstName} {this.state.formData.lastName}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Contact;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction Navigation(props) {\n  return (\n    <div className=\"Navigation\">\n      <ul>\n        <li>\n          <Link to=\"/\">Home</Link>\n        </li>\n        <li>\n          <Link to=\"/clock\">Clock</Link>\n        </li>\n        <li>\n          <Link to=\"/contact\">Contact</Link>\n        </li>\n        <li>\n          <Link to=\"/jeopardy\">Jeopardy</Link>\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nexport default Navigation;\n","import React from \"react\";\n\nfunction Page404(props) {\n  return (\n    <div className=\"Page404\">\n      <h1>404 response - bad request</h1>\n    </div>\n  );\n}\n\nexport default Page404;\n","//import the axios HTTP client to communicate with the API\nimport axios from \"axios\";\nclass JeopardyService {\n  constructor(\n    url = \"http://jservice.io/api/random?count=3\",\n    client = axios.create()\n  ) {\n    this.url = url;\n    this.client = client;\n  }\n  getQuestion() {\n    return this.client.get(this.url);\n  }\n}\nexport default JeopardyService;\n","import React from \"react\";\nimport \"./Display.css\";\n\nfunction Display(props) {\n  if (props.data.selected) {\n    return (\n      <div className=\"Display\">\n        <button onClick={props.handleSelect}>\n          Category: {props.data.category.title}\n        </button>\n        <h3>{props.data.question}</h3>\n        <p>${props.data.value}</p>\n        <input type=\"text\" value={props.guess} onChange={props.handleChange} />\n        <button onClick={props.handleSubmit}>Answer</button>\n      </div>\n    );\n  }\n  return (\n    <div className=\"Display\">\n      <button onClick={props.handleSelect}>\n        Category: {props.data.category.title}\n      </button>\n    </div>\n  );\n}\n\nexport default Display;\n","import React from \"react\";\nimport JeopardyService from \"../../jeopardyService\";\nimport Display from \"../display/Display\";\nimport \"./Jeopardy.css\";\n\nclass Jeopardy extends React.Component {\n  constructor(props) {\n    super(props);\n    this.client = new JeopardyService();\n    this.state = {\n      data: [],\n      guesses: [\"\", \"\", \"\"],\n      score: 0,\n    };\n  }\n  getNewQuestions() {\n    return this.client.getQuestion().then((result) => {\n      result.data.forEach((obj) => {\n        obj.selected = false;\n      });\n      this.setState({\n        data: result.data,\n      });\n    });\n  }\n  componentDidMount() {\n    this.getNewQuestions();\n  }\n\n  handleSelect = (i) => {\n    let data = [...this.state.data];\n    data[i].selected = !data[i].selected;\n    this.setState({ data });\n  };\n\n  handleChange = (guess, i) => {\n    let guesses = [...this.state.guesses];\n    guesses.splice(i, 1, guess);\n    this.setState({ guesses });\n  };\n\n  handleSubmit = (i) => {\n    this.setState((currentState) => {\n      let score = currentState.score;\n      let value = currentState.data[i].value;\n      let guess = currentState.guesses[i];\n      let answer = currentState.data[i].answer;\n      if (guess === answer) {\n        score += value;\n      } else {\n        score -= value;\n      }\n      return { score, guesses: [\"\", \"\", \"\"] };\n    });\n    return this.getNewQuestions();\n  };\n\n  render() {\n    if (this.state.data.length === 0) {\n      return <div className=\"Jeopardy\">Loading...</div>;\n    }\n    return (\n      <div className=\"Jeopardy\">\n        <h2>Score: ${this.state.score}</h2>\n        <div className=\"display-container\">\n          {this.state.data.map((obj, i) => (\n            <Display\n              key={i}\n              data={obj}\n              score={this.state.score}\n              guess={this.state.guesses[i]}\n              handleSelect={() => this.handleSelect(i)}\n              handleChange={(e) => this.handleChange(e.target.value, i)}\n              handleSubmit={() => this.handleSubmit(i)}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\nexport default Jeopardy;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport Welcome from \"./components/welcome/Welcome\";\nimport Clock from \"./components/clock/Clock\";\nimport Contact from \"./components/contact/Contact\";\nimport Navigation from \"./components/navigation/Navigation\";\nimport Page404 from \"./components/page404/Page404\";\nimport Jeopardy from \"./components/jeopardy/Jeopardy\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navigation />\n      <Switch>\n        <Route\n          exact\n          path=\"/\"\n          render={(props) => <Welcome {...props} name=\"Elizabeth\" />}\n        />\n        <Route\n          path=\"/welcome/:name\"\n          render={(props) => (\n            <Welcome {...props} name={props.match.params.name} />\n          )}\n        />\n        <Route path=\"/clock\" component={Clock} />\n        <Route path=\"/contact\" component={Contact} />\n        <Route path=\"/jeopardy\" component={Jeopardy} />\n        <Route component={Page404} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <BrowserRouter basename=\"/my-react-app\">\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}